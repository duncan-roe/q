.TH Q_MACROS 5 "04 Dec 2018" q-54 "q"
.SH NAME
Q macros - the Q macro facility
.SH DESCRIPTION
A \fBq\fR macro replaces its 2-character \fIinvocation sequence\fR with
the contents of the macro,
as originally defined by the \fBN-NEWMACRO\fR command.
.br
The sequence to invoke a macro is
.B ^N
.I macro_id
where
.I macro_id
is a single character represented as any of:
.br
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
itself (except caret). Example:\ \&\fB7\fR (the digit '7', macro 55)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A control character (caret\ \&+\ \&character).
Example:\ \&\fB^A\fR (Control-A, macro 1)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB^*\fR (an actual caret).
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
caret\ \&angle-brackets\ \&octal.
Example:\ \&\fB^<204>\fR (parity-high Control-D,
macro 0204 (132)). Macro characters are 16 bits wide,
so the octal value may range from 0 to 177777
.SH PSEUDOMACROS
Pseudomacros provide control and test facilities inside macros.
They fall into 3 groups:
.TP
.B 1.\ \&Basic Pseudomacros
These are the macros in rows 1 and 3 of Table\ \&1 below.
Some of these pseudomacros are available from the keyboard,
e.g. \fB^NO1\fR or \fB^No1\fR will set tab 1 to the current cursor position
(\fBO\fR=0117, \fBo\fR=0157).
.RS 3
.TP
.B Macro-writing considerations
The convention when writing macros is to code the pseudomacro Id in upper-case.
.br
Macros that conditionally skip will skip 2 characters: enough room for
\fB^N\fR\fImacro_id\fR.
The \fB^NL\fR unconditional 4-character skip allows for
\fB^ND^N\fR\fImacro_id\fR.
See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below.
.TP
.B List of Basic Pseudomacros
.RS 3
.TP
.BI ^N@
Jump to start of current macro
.TP
.BI ^NA
Skip unless at end of line
.TP
.BI ^NB tab_id
Skip unless before tab \fItab_id\fR (see \fBTAB\ \&IDS\fR below)
.TP
.BI ^NC
Skip unless editing a command line
.TP
.BI ^ND
Call next macro. See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below
.TP
.BI ^NE
Force inserting off (since \fB^E\fR is a toggle)
.TP
.BI ^NF tab_id
Remember File position in tab \fItab_id\fR (see \fBTAB\ \&IDS\fR below)
.TP
.BI ^NG char
Skip unless \fIchar\fR is under the cursor
.TP
.BI ^NI
Cause macro to skip on returning. See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below
.TP
.BI ^NJ char
Jump forward in macro by \fIchar\fR characters.
\fIchar\fR is treated as a 2's complement signed 16-bit quantity.
.br
This test demonstrates the result of jumping forward 6:
.nf
> fi ^NJ^<006>0123456789
> 6789
.fi
.TP
.BI ^NL
Unconditional 4-character skip. See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below
.TP
.BI ^NM macro_id
Defines macro \fImacro_id\fR to be the current (file or command) line.
When defining macros below 04000,
\fB^NM\fR will add \fB^NU\fR to the macro definition,
so the newly-defined macro is callable.
\fB^NM\fR can also define ALU & FPU memory locations.
.TP
.BI ^NN tab_id
Change the file position to the value of tab \fItab_id\fR
(see \fBTAB\ \&IDS\fR below)
.TP
.BI ^NO tab_id
Remember cursor position in tab \fItab_id\fR (see \fBTAB\ \&IDS\fR below)
.TP
.BI ^NP tab_id
skip unless after tab \fItab_id\fR (see \fBTAB\ \&IDS\fR below)
.TP
.BI ^NR tab_id
Move cursor to character position \fItab_id\fR (see \fBTAB\ \&IDS\fR below)
.TP
.BI ^NS
Unconditional skip
.TP
.BI ^NT
Trust the user to use \fB^NN\fR\fItab_id\fR to change the File Position while
editing a line from the file.
The user mast change the line number back before accepting the line to avoid
undefined behaviour
.TP
.BI ^NU
Return from macro. See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below
.TP
.BI ^NX
Exit macro. See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below
.TP
.BI ^N[ tab_id
Skip unless file position is before the value of tab \fItab_id\fR
(see \fBTAB\ \&IDS\fR below)
.TP
.B ^N\\\\
Force an error and ring the terminal bell.
See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below
.TP
.BI ^N] tab_id
Skip unless file position is after the value of tab \fItab_id\fR
(see \fBTAB\ \&IDS\fR below)
.RE
.RE
.TP
.B 2.\ \&Active pseudomacros
These all return a string when invoked. \fBq\fR uses some of them internally
(e.g. \fBq\fR uses ^<4010> to format the date / time returned by \fB^N^<4011>\fR
and \fB^N^<4012>\fR)
.RS 3
.TP
.B Macro-writing considerations
For these macros to return, \fB^ND\fR is required.
However \fB^NU\fR should not be added when redefining them -
\fBq\fR implements a \fB^NU\fR automatically.
.TP
.B List of Active Pseudomacros
.RS 3
.TP
.BI ^N^<4000>
Expands to the current \fBFM-FMODE\fR setting, in octal.
Modes are further described in q(1).
.TP
.BI ^N^<4001>
Helper pseudomacro for Foundation macro \fB^N^V\fR (view next screenful)
.TP
.BI ^N^<4002>
Expands to the pathname of the current file.
If there is not yet any pathname associated with the current file,
\fBq\fR will force a \fB^NX\fR instead of \fB^NU\fR at macro end
.TP
.BI ^N^<4003>
Expands to the directory containing HELP files and system macros. No trailing /
.TP
.BI ^N^<4004>
Helper pseudomacro for Foundation macro \fB^N^Q\fR (view previous screenful)
.TP
.BI ^N^<4005>
Returns screen width
.TP
.BI ^N^<4006>
Returns screen height
.TP
.BI ^N^<4007>
Returns format in effect for displaying FPU memory locations.
\fBN-NEWMACRO\fR can re-define
.TP
.BI ^N^<4010>
Returns format in effect for displaying current time.
\fBN-NEWMACRO\fR can re-define
.TP
.BI ^N^<4011>
Returns the current local time as formatted by \fB^N^<4010>\fR
.TP
.BI ^N^<4012>
Returns the current UTC time as formatted by \fB^N^<4010>\fR
.TP
.BI ^N^<4013>
Returns format in effect for displaying ALU memory locations.
\fBN-NEWMACRO\fR can re-define.
ALU memory locations are stored as longs,
so the format should always contain an 'l' (ell)
.RE
.TP
.B 3.\ \&ALU macros
\fBq\fR has within it a virtual run machine which the documentation refers to
as the \fIALU\fR (Arithmetic and Logic Unit)
although strictly speaking the ALU is only part of any computer.
.br
The ALU gives rise to 2 classes of pseudomacros: data reference and program
instruction (ALU opcode). These are describe below and in q_opcodes(5).
.RS 3
.TP
.B Macro-writing considerations
The ALU has 2 sets of data memory locations: one for long integer and one
for double floating point, see \fBTable\ \&1\fR below. These behave exactly as
modifiable active pseudomacros (macros should use \fB^ND\fR, do not code
\fB^NU\fR).
.br
ALU opcodes are coded as \fB^N^<\fR\fIopcode\fR\fB>\fR where \fIopcode\fR
is alphanumeric starting alphabetic, e.g \fBA1\fR: \fB^N^<A1>\fR adds 1 to
register \fBR\fR.
\fBq\fR translates \fB^N^<\fR\fIopcode\fR\fB>\fR to \fB^N^<4\fR\fIooo\fR\fB>\fR
where \fIooo\fR may vary from one \fBq\fR revision to another.
\fB^ND\fR and \fB^NU\fR are both implemented by \fBq\fR.
The convention that has been used is to always code in upper-case.
.TP
.B Data Reference Pseudomacros
.RS 3
.TP
.B Integer: n7000 - n7777
When setting these with \fBN_NEWMACRO\fR or \fB^NM\fR\fImacro_id\fR,
\fBq\fR first gives the macro definition to
\fBstrtol(3)\fR to convert as a signed quantity.
If this gets the error "Numerical result out of range" then \fBq\fR tries
\fBstrtoul(3)\fR which may succeed for octal or hexadecimal input formats.
\fBq\fR disallows decimal numbers greater than 9223372036854775807
(64-bit q) or 2147483647 (32-bit q): they would convert as unsigned longs but
would subsequently display as negative numbers.
.TP
.B Float: n13000 - n13777
When setting these with \fBN_NEWMACRO\fR or \fB^NM\fR\fImacro_id\fR,
\fBq\fR gives the macro definition to \fBstrtod(3)\fR.
.RE
.TP
.B ALU Opcode Pseudomacros
See \fBalu_opcodes(5)\fR
.SH MACROS AS SUBROUTINES
\fBq\fR has a macro call stack, which most of the system macros use.
To use the call stack, a macro must finish with the \fB^NU\fR pseudomacro,
which will resume execution in the calling macro following the 
\fB^N\fR\fImacro_id\fR sequence that invoked the finishing macro.
In the calling macro, that sequence must have been immediately preceded by the
\fB^ND\fR pseudomacro, to push a link on the macro call stack.
.br
When the documentation refers to \fIcalling\fR a macro,
it means \fB^ND^N\fR\fImacro_id\fR. \fIJumping\fR to a macro means simply
\fB^N\fR\fImacro_id\fR.
.br
The \fB^NL\fR pseudomacro is provided to allow conditional calling of macros.
\fB^NL\fR skips 4 characters, exactly enough for \fB^ND^N\fR\fImacro_id\fR.
.br
Like pseudomacros, called macros can skip on return (usually conditionally).
The \fB^NI\fR pseudomacro achieves this:
it increments the newest link on the macro call stack by 2.
.br
The \fB^NX\fR pseudomacro acts as if the invoking macro had run off its end
without a \fB^NU\fR.
The macro stack is unwound back to the last \fBU-USE\fR file or the keyboard.
.br
The \fB^N\\\fR pseudomacro forces an error. The macro stack and \fBU-USE\fR file
stack are both rewound back to the keyboard.
(If \fBQ\fR was invoked with \fB-o\fR or is in a pipe,
\fBq\fR will save and quit).
(\fB^N\\\fR is undefined and guaranteed to remain so).
.SH TAB IDS
\fBq\fR has 80 tabs, starting at tab 1. \fBT-TABSET\fR sets tabs starting at 1.
Pseudomacros and the ALU can set any tab. A tab can be in one of 3 states:
.TP
1.\ \&Character number in line
.TP
2.\ \&Line number in file
.TP
3.\ \&Unset

.RE
It is an error to use a tab inappropriately.
.br
For a list of tab IDs, start \fBq\fR and enter \fBH AS\fR.
.SH TABLES
.RE
.B Table\ \&1.\ \&Macro id map
.br
(\fIooo\fR is a 3-digit octal number)
.TS
allbox tab(:);
ltB ltB.
T{
Range (octal)
T}:T{
Description
T}
.T&
lt lt.
T{
000
T}:T{
The ^@ pseudomacro
T}
T{
001-077
T}:T{
Available for definition. Many of these are defined by the system macro sets,
but there are gaps
T}
T{
100-177
T}:T{
not user-definable: this is the pseudomacro namespace. (Immediate macros do
define some of this range however)
T}
T{
200-3777
T}:T{
Available for definition. Some of these are defined by the system macro sets
T}
T{
4000-4013
T}:T{
The currently implemented active pseudomacros
T}
T{
4200-4777
T}:T{
the ALU opcodes (with some room for expansion).
Start point is q-revision dependent
T}
T{
5\fIooo\fR
T}:T{
Implement \fB^<PSH\ \&\fIooo\fB>\fR.
Treat these as Reserved
T}
T{
6\fIooo\fR
T}:T{
Implement \fB^<POP\ \&\fIooo\fB>\fR.
Treat these as Reserved
T}
T{
7\fIooo\fR
T}:T{
ALU long integer memory locations.
Use \fBn\ \&7\fIooo\fR, \fB^NM7\fR\fIooo\fR
or \fB^<POP \&\fIooo\fB>\fR to set,
and \fB^N^<7\fIooo\fB>\fR or \fB^<PSH\ \&\fIooo\fB>\fR to get.
(Macros would usually use \fB^ND^N^<7\fIooo\fB>\fR)
T}
T{
10000-10777
T}:T{
(Reserved)
T}
T{
11\fIooo\fR
T}:T{
Implement \fB^<PSHF\ \&\fIooo\fB>\fR.
Treat these as Reserved
T}
T{
12\fIooo\fR
T}:T{
Implement \fB^<POPF\ \&\fIooo\fB>\fR.
Treat these as Reserved
T}
T{
13\fIooo\fR
T}:T{
FPU double memory locations.
Use \fBn\ \&13\fIooo\fR, \fB^NM13\fR\fIooo\fR
or \fB^<POPF \&\fIooo\fB>\fR to set,
and \fB^N^<13\fIooo\fB>\fR or \fB^<PSHF\ \&\fIooo\fB>\fR to get.
(Macros would usually use \fB^ND^N^<13\fIooo\fB>\fR)
T}
.TE

.SH EXAMPLES
	
.br
.B Paginate through loaded macros from shell command prompt
.br
(i.e. command to run in a separate window from the one running \fBq\fR)
.RS 3
The \fBq\fR command \fBn\ \&\-\fR lists out all loaded macros.
The line below captures this output and pipes it into \fBless\fR.
The command should be issued with the same current working directory as \fBq\fR
so as to pick up the correct \fIStartup file\fR.
.RE
.nf
cat /dev/null | q -v -i n,-^J 2>&1 | q -i fl,:^J^NC^NU^[d,1,-,-2^Ja^J^[d,-1^Jy,^P^M,,^J | less
.fi
.RS 3
The pipeline contains two invocations of \fBq\fR:
.RS 3
1.\ \&Run with the \fB-v\fR option
so output from \fBq\fR commands goes to stderr;
issue the \fBn,-\fR command; redirect stderr back into the stdout pipe.
.br
2.\ \&Trim off unwanted leading lines:
everything before the first line that has a colon surrounded by spaces
(i.e. token delimiters); trim off the unwanted trailing line
(in fact an internally generated \fBfq\fR command);
remove Cr (\fB^M\fR) characters.
.RE
Any need for shell quoting is obviated
by using \fBq\fR's \fIcomma\fR delimiter in commands.
The sequence \fB^NC^NU\fR guards against there being no defined macros.
The above line is expanded for clarity:
the canonical (minimum length) version is:
.RE
.nf
cat /dev/null|q -vin-^J 2>&1|q -ifl:^J^NC^NU^[d1,-,-2^Ja^J^[d-1^Jy,^P^M^J|less
.fi
.PP
.B Change what the space macro does
.RS 3
The foundation macro set defines the space macro (\fB^N\fIspace\fR)
to run \fBmake\fR.
This \fBq\fR invocation sequence redefines the space macro to run
\fBtail\fR to output only the last line (i.e. without line numbering):
.RE
.nf
q -i 'n 040,! tail -n1 ^*ND^*N^*<4002>^*J^J'
.fi
.RS 3
The immediate macro definition has to be quoted,
since it contains the shell meta-characters space and angle brackets.
The definition of the space macro contains escaped carets (\fB^*\fR)
because the defined immediate macro will issue the \fBN-NEWMACRO\fR command
to redefine the space macro:
.RE
.nf
n 040,! tail -n1 ^ND^N^<4002>^J
.fi
.RS 3
(The sequence \fB^N^<4002>\fR retrieves the name of the current edit file).
.RE
.SH SEE ALSO
q(1), strtol(3), strtoul(3), strtod(3)
