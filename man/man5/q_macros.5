.TH Q_MACROS 5 "04 Dec 2018" q-54 "q"
.SH NAME
Q macros - the Q macro facility
.SH DESCRIPTION
A \fBq\fR macro replaces its 2-character \fIinvocation sequence\fR with
the contents of the macro,
as originally defined by the \fBN-NEWMACRO\fR command.
.br
The sequence to invoke a macro is
.B ^N
.I macro_id
where
.I macro_id
is a single character represented as any of:
.br
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
itself (except caret). Example:\ \&\fB7\fR (the digit '7', macro 55)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A control character (caret\ \&+\ \&character).
Example:\ \&\fB^A\fR (Control-A, macro 1)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB^*\fR (an actual caret).
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
caret\ \&angle-brackets\ \&octal.
Example:\ \&\fB^<204>\fR (parity-high Control-D,
macro 0204 (132)). Macro characters are 16 bits wide,
so the octal value may range from 0 to 177777
.SH PSEUDOMACROS
Pseudomacros provide control and test facilities inside macros.
They fall into 3 groups:
.TP
.B 1.\ \&Basic Pseudomacros
These are the macros in rows 1 and 3 of Table\ \&1 below.
Some of these pseudomacros are available from the keyboard,
e.g. \fB^NO1\fR or \fB^No1\fR will set tab 1 to the current cursor position
(\fBO\fR=0117, \fBo\fR=0157).
.RS 3
.TP
.B Macro-writing considerations
The convention when writing macros is to code the pseudomacro Id in upper-case.
.br
Macros that conditionally skip will skip 2 characters: enough room for
\fB^N\fR\fImacro_id\fR.
The \fB^NL\fR unconditional 4-character skip allows for
\fB^ND^N\fR\fImacro_id\fR.
See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below.
.TP
.B List of Basic Pseudomacros
.RS 3
.TP
.BI ^N@
Jump to start of current macro
.TP
.BI ^NA
Skip unless at end of line
.TP
.BI ^NB tab_id
Skip unless before tab \fItab_id\fR (see \fBTAB\ \&IDS\fR below)
.TP
.BI ^NC
Skip unless editing a command line
.TP
.BI ^ND
Call next macro. See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below
.TP
.BI ^NE
Force inserting off (since \fB^E\fR is a toggle)
.TP
.BI ^NF tab_id
Remember File position in tab \fItab_id\fR (see \fBTAB\ \&IDS\fR below)
.TP
.BI ^NG char
Skip unless \fIchar\fR is under the cursor
.TP
.BI ^NI
Cause macro to skip on returning. See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below
.TP
.BI ^NJ char
Jump forward in macro by \fIchar\fR characters.
\fIchar\fR is treated as a 2's complement signed 16-bit quantity.
.br
This test demonstrates the result of jumping forward 6:
.nf
> fi ^NJ^<006>0123456789
> 6789
.fi
.TP
.BI ^NL
Unconditional 4-character skip. See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below
.TP
.BI ^NM macro_id
Defines macro \fImacro_id\fR to be the current (file or command) line.
When defining macros below 04000,
\fB^NM\fR will add \fB^NU\fR to the macro definition,
so the newly-defined macro is callable.
\fB^NM\fR can also define ALU & FPU memory locations.
.TP
.BI ^NN tab_id
Change the file position to the value of tab \fItab_id\fR
(see \fBTAB\ \&IDS\fR below)
.TP
.BI ^NO tab_id
Remember cursor position in tab \fItab_id\fR (see \fBTAB\ \&IDS\fR below)
.TP
.BI ^NP tab_id
skip unless after tab \fItab_id\fR (see \fBTAB\ \&IDS\fR below)
.TP
.BI ^NR tab_id
Move cursor to character position \fItab_id\fR (see \fBTAB\ \&IDS\fR below)
.TP
.BI ^NS
Unconditional skip
.TP
.BI ^NT
Trust the user to use \fB^NN\fR\fItab_id\fR to change the File Position while
editing a line from the file.
The user mast change the line number back before accepting the line to avoid
undefined behaviour
.TP
.BI ^NU
Return from macro. See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below
.TP
.BI ^NX
Exit macro. See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below
.TP
.BI ^N[ tab_id
Skip unless file position is before the value of tab \fItab_id\fR
(see \fBTAB\ \&IDS\fR below)
.TP
.B ^N\\\\
Force an error and ring the terminal bell.
See \fBMACROS\ \&AS\ \&SUBROUTINES\fR below
.TP
.BI ^N] tab_id
Skip unless file position is after the value of tab \fItab_id\fR
(see \fBTAB\ \&IDS\fR below)
.RE
.RE
.TP
.B 2.\ \&Active pseudomacros
These all return a string when invoked. \fBq\fR uses some of them internally
(e.g. \fBq\fR uses ^<4010> to format the date / time returned by \fB^N^<4011>\fR
and \fB^N^<4012>\fR)
.RS 3
.TP
.B Macro-writing considerations
For these macros to return, \fB^ND\fR is required.
However \fB^NU\fR should not be added when redefining them -
\fBq\fR implements a \fB^NU\fR automatically.
.TP
.B List of Active Pseudomacros
.RS 3
.TP
.BI ^N^<4000>
Expands to the current \fBFM-FMODE\fR setting, in octal.
Modes are further described in q(1).
.TP
.BI ^N^<4001>
Helper pseudomacro for Foundation macro \fB^N^V\fR (view next screenful)
.TP
.BI ^N^<4002>
Expands to the pathname of the current file.
If there is not yet any pathname associated with the current file,
\fBq\fR will force a \fB^NX\fR instead of \fB^NU\fR at macro end
.TP
.BI ^N^<4003>
Expands to the directory containing HELP files and system macros. No trailing /
.TP
.BI ^N^<4004>
Helper pseudomacro for Foundation macro \fB^N^Q\fR (view previous screenful)
.TP
.BI ^N^<4005>
Returns screen width
.TP
.BI ^N^<4006>
Returns screen height
.TP
.BI ^N^<4007>
Returns format in effect for displaying FPU memory locations.
\fBN-NEWMACRO\fR can re-define
.TP
.BI ^N^<4010>
Returns format in effect for displaying current time.
\fBN-NEWMACRO\fR can re-define
.TP
.BI ^N^<4011>
Returns the current local time as formatted by \fB^N^<4010>\fR
.TP
.BI ^N^<4012>
Returns the current UTC time as formatted by \fB^N^<4010>\fR
.TP
.BI ^N^<4013>
Returns format in effect for displaying ALU memory locations.
\fBN-NEWMACRO\fR can re-define.
ALU memory locations are stored as longs,
so the format should always contain an 'l' (ell)
.RE
.TP
.B 3.\ \&ALU macros
\fBq\fR has within it a virtual run machine which the documentation refers to
as the \fIALU\fR (Arithmetic and Logic Unit)
although strictly speaking the ALU is only part of any computer.
.br
The ALU gives rise to 2 classes of pseudomacros: data reference and program
instruction (ALU opcode). These are describe below and in q_opcodes(5).
.RS 3
.TP
.B Macro-writing considerations
The ALU has 2 sets of data memory locations: one for long integer and one
for double floating point, see \fBTable\ \&1\fR below. These behave exactly as
modifiable active pseudomacros (macros should use \fB^ND\fR, do not code
\fB^NU\fR).
.br
ALU opcodes are coded as \fB^<\fR\fIopcode\fR\fB>\fR where \fIopcode\fR
is alphanumeric starting alphabetic, e.g \fBA1\fR: \fB^<A1>\fR adds 1 to
register \fBR\fR.
\fBq\fR translates \fB^<\fR\fIopcode\fR\fB>\fR to \fB^N^<4\fR\fIooo\fR\fB>\fR
where \fIooo\fR may vary from one \fBq\fR revision to another.
\fB^ND\fR and \fB^NU\fR are both implemented by \fBq\fR.
The convention that has been used is to always code opcodes in upper-case.
.TP
.B Data Reference Pseudomacros
.RS 3
.TP
.B Integer: n7000 - n7777
When setting these with \fBN_NEWMACRO\fR or \fB^NM\fR\fImacro_id\fR,
\fBq\fR first gives the macro definition to
\fBstrtol(3)\fR to convert as a signed quantity.
If this gets the error "Numerical result out of range" then \fBq\fR tries
\fBstrtoul(3)\fR which may succeed for octal or hexadecimal input formats.
\fBq\fR disallows decimal numbers greater than 9223372036854775807
(64-bit q) or 2147483647 (32-bit q): they would convert as unsigned longs but
would subsequently display as negative numbers.
.TP
.B Float: n13000 - n13777
When setting these with \fBN_NEWMACRO\fR or \fB^NM\fR\fImacro_id\fR,
\fBq\fR gives the macro definition to \fBstrtod(3)\fR.
.RE
.TP
.B ALU Opcode Pseudomacros
See \fBalu_opcodes(5)\fR
.SH DEFINING MACROS
.br
There are 3 ways of defining macros:
.TP
.B 1.\ \&N-NEWMACRO command
.br
The \fBN-NEWMACRO\fR command is the principal means of defining macros.
It is well-described by its \fIhelp\fR, reproduced below:
.RE
.RS -7
.nf
  \/ N - N E W M A C R O \/
 Defines a new q macro, writes current macro definitions to a file or displays
them.
 Formats
 NEWMACRO <macro id>,<macro body>
 NEWMACRO -  <file>                /* Type or list to file all macros
 NEWMACRO -- <file>                /* Type or list to file ALU macros only
 Parameters
 <macro id>   identification of the macro to be defined. The macros that can be
              defined are the control chars except NUL, the next 32 characters
              (i.e. 040 ' ' up to 077 '?') and anything from 0200 to 03777.
              (the gap of 64 allows pseudo-macros to be invoked as upper or
              lower case). The control characters are identified as their
              either-case equivalents, e.g. "N A ..." defines the control-A
              macro, as does "n a ...". "n A ..." follows the suggested macro-
              writing convention that control characters are shown in upper-
              case, and Q commands in lower.

              The next 32 macros may be identified as themselves, except for
              minus ('-'), which can be identified by '@'. Quotes are required
              for macros so specified, if they contain comma or space.
              Macros 01 - 077 may also identified by their 2-digit octal ASCII
              value, e.g. "n ',' ..." & "n54 ..." both define the comma macro.

              All other macros must be identified using 3 or more octal digits.
              Quoting is not required and must not be used in the bodies of
              macros so identified (but it is required with 2-digit octal ID).
              This (long octal) format is also available for normal characters,
              e.g. "n001 ..." also defines the control-A macro,
              but now "..." must not be quoted.

              Macro zero (NUL) may not be defined by N-NEWMACRO because ^N^@
              inside a macro has the special meaning of "restart the current
              macro". This is particularly useful for FI-FIMMEDIATE_MACRO where
              the macro is otherwise inaccessible (its macro number lies in the
              pseudo-macro range), but any macro may use ^N^@ (or ^N^<0>) to
              re-invoke itself.

 <macro body> The definition. If the <macro-id> was specified as 1 or 2
              characters, this will need to be quoted if it contains comma or
              space. Otherwise it is read as raw text and should not be quoted.
              Control characters can be represented by '^' followed by the
              upper case equivalent, which is the preferred method although
              they can be entered directly, following '^P'. '^' is entered as
              '^*' and rubout as '^?' i.e. exactly the same conventions as on
              output ('^' only shows as '^*' if "fm +*" is asserted).
              Also just as on output,
              characters 0200 onwards are entered as "^<3+ -digit octal>".
              This format is also available for normal characters,
              e.g. "n001 ^<054> defines the control-A macro to be a comma.

 <file>       File to accept macro definitions, which will be written in a
              format suitable for re-input using U-USE. Optional - if omitted,
              macro definitions are displayed at the terminal.
.fi
.RE
.TP
.BI 2.\ \&^NM macro_id
.br
This is described under \fBList of Basic Pseudomacros\fR above.
.TP
.B 3.\ \&FI-FIMMEDIATE_MACRO command
.br
\fBFI\fR takes a macro body as its sole argument.
This macro body is read as raw text as for \fBN-NEWMACRO\fR with a long octal
\fImacro_id\fR.
The macro is obeyed straight away.
.SH MACROS AS SUBROUTINES
\fBq\fR has a macro call stack, which most of the system macros use.
To use the call stack, a macro must finish with the \fB^NU\fR pseudomacro,
which will resume execution in the calling macro following the 
\fB^N\fR\fImacro_id\fR sequence that invoked the finishing macro.
In the calling macro, that sequence must have been immediately preceded by the
\fB^ND\fR pseudomacro, to push a link on the macro call stack.
.br
When the documentation refers to \fIcalling\fR a macro,
it means \fB^ND^N\fR\fImacro_id\fR. \fIJumping\fR to a macro means simply
\fB^N\fR\fImacro_id\fR.
.br
The \fB^NL\fR pseudomacro is provided to allow conditional calling of macros.
\fB^NL\fR skips 4 characters, exactly enough for \fB^ND^N\fR\fImacro_id\fR.
.br
Like pseudomacros, called macros can skip on return (usually conditionally).
The \fB^NI\fR pseudomacro achieves this:
it increments the newest link on the macro call stack by 2.
.br
The \fB^NX\fR pseudomacro acts as if the invoking macro had run off its end
without a \fB^NU\fR.
The macro stack is unwound back to the last \fBU-USE\fR file or the keyboard.
.br
The \fB^N\\\fR pseudomacro forces an error. The macro stack and \fBU-USE\fR file
stack are both rewound back to the keyboard.
(If \fBQ\fR was invoked with \fB-o\fR or is in a pipe,
\fBq\fR will save and quit).
(\fB^N\\\fR is undefined and guaranteed to remain so).
.SH TAB IDS
\fBq\fR has 80 tabs, starting at tab 1. \fBT-TABSET\fR sets tabs starting at 1.
Pseudomacros and the ALU can set any tab. A tab can be in one of 3 states:
.TP
1.\ \&Character number in line
.TP
2.\ \&Line number in file
.TP
3.\ \&Unset

.RE
It is an error to use a tab inappropriately.
.br
For a list of tab IDs, start \fBq\fR and enter \fBH AS\fR.
.SH KEYBOARD-ACCESSIBLE MACROS
\fIKeyboard-accessible macros\fR are those macros which can be invoked from the
keyboard without recourse to the FI-FIMMEDIATE_MACRO command.
These are the macros in row 2 of Table\ \&1 (^A - ?) and the first 0200 (128)
macros in row 4 (parity-high NUL - parity-high DEL). The parity-high macros
are invoked by keying the sequence \fB^N^W\fR\fImacro_meta_id\fR
where \fImacro_meta_id\fR *is* case-sensitive.
.SH COMMENTS
.TP
.B Whole lines
The whole line is a comment if its first non-space character is '\fB#\fR'.
('\fB*\fR' also works, for backward compatibility with some old macros).
.TP
.B Trailing comments
The sequence '\fB/*\fR' starts a comment anywhere in a command line.
It need not have spaces on eiher side.
Exception: '\fB/*\fR' is not recognised when reading raw text (e.g by
N-NEWMACRO with a long octal \fImacro_id\fR).
.TP
.B Trailing comments in macros
Most macros terminate explicitly, by returning, jumping to another macro, or
looping. Any text placed after this termination will never be obeyed,
so can act as a comment.
These comments are then visible when listing macro contents by \fBq\fR's
\fBN -\fR command, as in the first entry in \fBEXAMPLES\fR below.
.SH MACRO-WRITING GUIDELINES
These are the guidelines that have been adhered to in the creation of the
system macro sets that are distributed with \fBq\fR.
.TP
.BI Casing
The simple rule is: if a case-independent item is a \fBq\fR command then put it
in lower-case, otherwise put it in upper-case.
In other words, show control characters,
basic pseudomacros and ALU opcodes in upper-case
(e.g. \fB^A\fR, \fB^NA\fR & \fB^<A1>\fR).
Also when a \fItab_id\fR is used as a line number,
show the \fBT\fR in upper-case
(\fItab_id\fRs themselves are case-sensitive so \fBg\ \&Ta\fR and
\fBg\ \&TA\fR refer to different tabs).
.TP
.B Always code as a subroutine
Rather than letting a macro terminate by running off the end,
always code \fB^NU\fR.
No harm is done if the macro was not invoked by another macro,
but \fB^NU\fR makes that possible in the future.
.TP
.B Keyboard-accessible macros should check context
Many macros are designed to be invoked when \fBq\fR is in a particular mode,
be that command mode or file mode.
To guard against accidental invocation in the wrong mode,
keyboard-accessible macros should start with the sequence \fB^NC^NS^N\\\fR
(error out if not in command mode) or the opposite \fB^NC^N\\\fR.
.br
\fB^N\\\fR (signal error) is also appropriate when unexpected things happen,
e.g. \fB^G\fR\fIchar\fR ends up at end of line (as determined by \fB^NA\fR)
because \fIchar\fR was not found on the line.
.TP
.B Annotate well
.RS 7
.TP
.B Put trailing macro comments in keyboard-accessible macros
Providing a keyboard-accessible macro is not too long,
a trailing comment can remind the macro author and inform others what the macro
does.
Longer and/or more complex macros can benefit from whole-line comments in the
macro definition file.
This is well-illustrated by this excerpt from \fBfndtn.qm\fR (starts line 51):
.RS -14
.nf
N201 ^NC^NS^N\\^A^J^NC^NU^[^N^@ ;(^N^W^A) repeat last LOCATE till no more found
# n206 - (^N^W^F) search current file for all occurrences of command line.
#        grep options in n1404; pipe-into command in n1405
N206 ^NC^NS^N\\^NM^<1202>^U!grep ^ND^N^<1404> -- '^ND^N^<1202>' "^ND^N^<4002>"^ND^N^<1405>^J^NU
.fi
.RE
.RS 7
Several points to note in the above:
.br
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Insert the invoking key sequence for a macro above 0177
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
N201 has an inline explanatory comment because it is a short macro,
but n206 is long so has a whole-line explanatory comment.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The second comment line to n206 highlights called macros that may usefully be
re-defined.
The two highlighted macros start off as:
.RS -25
.nf
1404 -wn^NU ; grep options for ^N^W^F
1405 ^NU ; Command to run after N206 (^N^W^F) (e.g. |less -ESX^NU, |cat^NU)
.fi
.RE
(the above 2 lines show how macros are displayed from the first item in
\fBEXAMPLES\fR below (starting \fBcat\ \&/dev/null\fR).
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
System macros generally start inline macro comments with a semicolon (\fB;\fR).
There is nothing special about this character:
it is only there to make the comment stand out better to the user.
.RE
.RE
.TP
.B Have a table of memory location use
\fBq\fR doesn't have symbolic names for memory locations so it is usually
helpful to document them in comments.
.br
As an example,
the foundation macro set defines the \fB^N7\fR macro to draw a 2-line
ruler to fill the screen width exactly.
\fB^N7\fR is used in lieu of the \fIEnter\fR key after completing the entry of a
command, e.g. to modify line 42 with a ruler,
keying \fBm42^N7\fR in an 80-column xterm would produce something like:
.RS -14
.nf
> *             1         2         3         4         5         6         7
> *    123456789012345678901234567890123456789012345678901234567890123456789012
  m 42
    42 Don't Panic
.fi
.RE
.RS 7
\fB^N7\fR has inserted 2 comment lines:
a series of right-justified 10's markers followed by a series of units.
\fB^N7\fR does some initialisation then calls \fB^N^<777>\fR which is
annotated thusly:
.RE
.RS -14
.nf
# N777 - Draw ruler of length ^N^<7000>. Sets up initial values then calls N776
#        To fit the screen exactly, N7000 should be 8 less than screen width
#        (as returned by N4005)
#   Memory locations:-
#   N7000 - ruler width
#   N7001 - constant 10
#   N7002 - constant 100
#   N7003 - constant 1000
#   N7004 - How many spaces to put before next 10's marker
#   N7005 - How many 10's markers left to do or value of next single digit
#   N7006 - Value of next 10's marker
.fi
.RE
.RS 7
In the memory location table above, N7000 refers to memory location 0,
accessed by \fB^<PSH\ \&0>\fR, and so on.
.RE
.RE
.TP
.B Consider using q -n in pipes
\fBq\fR's \fB-i\fR argument is compulsory in a pipe,
which equates to having to write an immediate macro.
Using \fBq\ \&-n\fR can help to ensure consistent results,
because all the mode settings will be the defaults as documented by
\fBH\ \&FM\fR issued from within \fBq\fR.
.br
Often, \fBq\fR running in a pipe will not use any of the system macros anyway,
and if it does then it is safer to U-USE them as part of the \fB-i\fR
immediate macro.
.TP
.B Only 1 keyboard-accessible macro per macro suite
When a macro calls other macros which themselves can't be usefully invoked
directly by the user, define these macros to be outside of the
keyboard-accessible range.
This saves room in the keyboard-accessible range and avoids the possibility
that the user might invoke one of these macros by mistake. These
internally-called macros typically don't check for e.g. edit / command mode:
that is the job of the entry-level macro (that the user invokes).
.TP
.B There is a macro debugger
As an aid to developing macros, \fBq\fR works in conjunction with \fBgdb\fR to
provide a macro debugger.
The process is well described in the file
\fBREADME_DEBUG_MACROS\fR in the Documentation directory,
including a worked example that the reader can try.
.SH TABLES
.RE
.B Table\ \&1.\ \&Macro id map
.br
(\fIooo\fR is a 3-digit octal number)
.TS
allbox tab(:);
ltB ltB.
T{
Range (octal)
T}:T{
Description
T}
.T&
lt lt.
T{
000
T}:T{
The ^@ pseudomacro
T}
T{
001-077
T}:T{
Available for definition. Many of these are defined by the system macro sets,
but there are gaps
T}
T{
100-177
T}:T{
not user-definable: this is the pseudomacro namespace. (Immediate macros do
define some of this range however)
T}
T{
200-3777
T}:T{
Available for definition. Some of these are defined by the system macro sets
T}
T{
4000-4013
T}:T{
The currently implemented active pseudomacros
T}
T{
4200-4777
T}:T{
the ALU opcodes (with some room for expansion).
Start point is q-revision dependent
T}
T{
5\fIooo\fR
T}:T{
Implement \fB^<PSH\ \&\fIooo\fB>\fR.
Treat these as Reserved
T}
T{
6\fIooo\fR
T}:T{
Implement \fB^<POP\ \&\fIooo\fB>\fR.
Treat these as Reserved
T}
T{
7\fIooo\fR
T}:T{
ALU long integer memory locations.
Use \fBN\ \&7\fIooo\fR, \fB^NM^<7\fR\fIooo\fB>\fR
or \fB^<POP\ \&\fIooo\fB>\fR to set,
and \fB^N^<7\fIooo\fB>\fR or \fB^<PSH\ \&\fIooo\fB>\fR to get.
(Macros would usually use \fB^ND^N^<7\fIooo\fB>\fR)
T}
T{
10000-10777
T}:T{
(Reserved)
T}
T{
11\fIooo\fR
T}:T{
Implement \fB^<PSHF\ \&\fIooo\fB>\fR.
Treat these as Reserved
T}
T{
12\fIooo\fR
T}:T{
Implement \fB^<POPF\ \&\fIooo\fB>\fR.
Treat these as Reserved
T}
T{
13\fIooo\fR
T}:T{
FPU double memory locations.
Use \fBN\ \&13\fIooo\fR, \fB^NM^<13\fR\fIooo\fB>\fR
or \fB^<POPF\ \&\fIooo\fB>\fR to set,
and \fB^N^<13\fIooo\fB>\fR or \fB^<PSHF\ \&\fIooo\fB>\fR to get.
(Macros would usually use \fB^ND^N^<13\fIooo\fB>\fR)
T}
.TE

.SH EXAMPLES
	
.br
.B Paginate through loaded macros from shell command prompt
.br
(i.e. command to run in a separate window from the one running \fBq\fR)
.RS 3
The \fBq\fR command \fBn\ \&\-\fR lists out all loaded macros.
The line below captures this output and pipes it into \fBless\fR.
The command should be issued with the same current working directory as \fBq\fR
so as to pick up the correct \fIStartup file\fR.
.RE
.RS -7
.nf
cat /dev/null | q -v -i n,-^J 2>&1 | q -n -i fl,:^J^NC^NU^[d,1,-,-2^Ja^J^[d,-1^Jy,^P^M,,^J | less
.fi
.RE
.RS 3
The pipeline contains two invocations of \fBq\fR:
.TP
.B 1.
Run with the \fB-v\fR option
so output from \fBq\fR commands goes to stderr;
issue the \fBn,-\fR command; redirect stderr back into the stdout pipe.
.TP
.B 2.
Run with the \fB-n\fR option as discussed in \fBMACRO-WRITING GUIDELINES\fR
above; trim off unwanted leading lines:
everything before the first line that has a colon surrounded by spaces
(i.e. token delimiters); trim off the unwanted trailing line
(in fact an internally generated \fBfq\fR command);
remove Cr (\fB^M\fR) characters.
.RE
Any need for shell quoting is obviated
by using \fBq\fR's \fIcomma\fR delimiter in commands.
The sequence \fB^NC^NU\fR guards against there being no defined macros.
The above line is expanded for clarity:
the canonical (minimum length) version is:
.RE
.RS -7
.nf
cat /dev/null|q -vin-^J 2>&1|q -nifl:^J^NC^NU^[d1,-,-2^Ja^J^[d-1^Jy,^P^M^J|less
.fi
.RE
.PP
.B Change what the space macro does
.RS 3
The foundation macro set defines the space macro (\fB^N\fIspace\fR)
to run \fBmake\fR.
This \fBq\fR invocation sequence redefines the space macro to run
\fBtail\fR to output only the last line (i.e. without line numbering):
.RE
.RS -7
.nf
q -i 'n 040,! tail -n1 ^*ND^*N^*<4002>^*J^J'
.fi
.RE
.RS 3
The immediate macro definition has to be quoted,
since it contains the shell meta-characters space and angle brackets.
The definition of the space macro contains escaped carets (\fB^*\fR)
because the defined immediate macro will issue the \fBN-NEWMACRO\fR command
to redefine the space macro:
.RE
.nf
n 040,! tail -n1 ^ND^N^<4002>^J
.fi
.RS 3
(The sequence \fB^N^<4002>\fR retrieves the name of the current edit file).
.RE
.SH SEE ALSO
q(1), strtol(3), strtoul(3), strtod(3), q_opcodes(5)
