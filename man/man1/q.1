.\"
.\" q manual page.
.\" Copyright (c) 2018,2020 Duncan Roe
.\"
.\" Original author: Duncan Roe
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2, or (at your option)
.\" any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; see the file COPYING.  If not, write to
.\" the Free Software Foundation, 59 Temple Place - Suite 330,
.\" Boston, MA 02111-1307, USA.
.\"
.TH q 1 "Oct 31 2020" "q-56" "Linux Programmer's Manual"
.SH NAME
q \- line-oriented mostly WYSIWYG editor with a powerful macro facility
.SH SYNOPSIS
\f3q\f1 [\f3-AVbdemnoqtvv\f1] [\f3-i\f2 initial_macro\f1] [\f3+\f2line# file\f1]
[\f2file\f1[\f3:\f2line#\f1] [...]]
.br
\f2command\f1 [...] \f3| q \f1[\f3-bdntv\f1]\f3 -i\f2 initial_macro \f3|\f2
command\f1 [...]
.SH DESCRIPTION
\f3q\f1 is a command-driven line-oriented editor in which almost all the control
keys perform some editing function.
More complex functions are provided by macros.
.br
\f3q\f1 is always either in \f2edit mode\f1 or \f2 command mode\f1. In edit
mode, \f3q\f1 is editing a line from the current file;
in command mode, \f3q\f1 is building up the next command to execute.
Full editing is available in both modes.
.br
\f3q\f1 commands all abbreviate to 1 character except those starting
\f3f\f1\ \&(\fBfanout\fR)
which abbreviate to 2.
Command arguments are delineated by space or comma, with a pair of commas
denoting an empty argument.
Those commands that take the rest of the line as input treat any spaces
following the first as part of the argument.
A single quote turns off comma and space recognition until a matching single
quote or end of line.
Inside quoted text, a pair of quotes is interpreted as a single literal quote.
.br
\f3q\f1 commands are case-insensitive, as are \f3q\f1 \f3help\f1 topics.
The documentation generally refers to commands in upper case,
in the form \f2command abbreviation\f3-\f2full command name\f1
as in \f3H\f1-\f3HELP\f1 below.
.br
\fBq\fR always displays line numbers when showing file contents.
If a line is longer than the screen is wide, subsequent parts are displayed with
a part number (starting at 2) instead of a line number.
After the last line of a file,
\fBq\fR displays \fBE - O - F\fR (\fIE\fRnd \fIO\fRf \fIF\fRile)
in lieu of a line number.
.PP
\f3Startup file\f1
.RS 3
On starting, unless the \fB-n\fR option was given,
\fBq\fR reads commands from a startup file before accepting user
input.
These commands typically load macros and may set some modes
(see \fBMODES\fR below).
.br
\f3q\f1 first looks in the current working directory for a file named
\f3.qrc\f1.
If not found, it tries to open \f3$HOME/.qrc\f1.
If no such file then it reads the file \f3qrc\f1 in 
\f3/usr/local/etc\f1 or wherever was configured at build time.
.RE
.PP
\f3Line number\f1
.RS 3
If there is a \f2line#\f1 associated with a \fIfile\fR argument,
\f3q\f1 positions to that line and does a \f3V-VIEW\f1 command
before accepting user input.
.RE
.PP
\f3Command massaging\f1
.RS 3
Provided it has no quoted parts, \f3q\f1 will split off the first argument to a
command from the command if it can
(i.e. without the user needing to type the intervening space or comma).
It can do this for any command if the argument starts with a non-alphabetic
character and for all instances of the \f3!\f1 (shell) command.
For example, the command "p23" (print 23 lines) will be interpreted
(and displayed) as "p 23".
.RE
.PP
\fBInitial Macro\fR
.RS 3
On starting, if the \fB-i\fR\ \&\fIinitial_macro\fR option was given,
\fBq\fR constructs and obeys an \fIimmediate\ \&macro\fR
from the argument of \fB-i\fR (see \fBq_macros(5)\fR).
This runs after the first \fBfile\fR has been loaded.
.RE
.PP
\f3Running q in a pipe\f1
.RS 3
When running in a pipe, \f3q\f1 accumulates data from stdin until end of file
before doing anything else.
On exit, \f3q\f1 writes the edited file to stdout.
The mandatory \f3-i\f1 \fIinitial_macro\fR should not try to save the file.
stdin may be redirected from a file rather than a pipe:
the rule is that if stdin is not a tty and the \fB-o\fR option was not given,
then \fBq\fR assumes it is running in a pipe.
.br
Running in a pipe automatically asserts the \fB-o\fR and \fB-q\fR options -
see \fBOPTIONS\fR below.
.br
To see the output that \fB-q\fR would otherwise discard,
give the \fB-v\fR option
(run \fIV\fRerbosely: stdout is instead redirected to stderr).
.RE
.SH OPTIONS
To see a description of all options, start \f3q\f1 and enter \f3H\ \&IQ\f1.
.br
In the summary below,
the descriptions of options that are toggles assume \fBq\fR's default behaviour
has not been altered by a \fIStartup file\fR:
.TP
.BI \-A
causes \fBq\fR to output the currently supported ALU (and FPU) opcodes.
If \fB-A\fR is the only command-line argument, \fBq\fR then exits.
\fBq\ \&-A\fR also works inside \fBq\fR.
.TP
.BI \-V
causes \fBq\fR to output its Version number.
If \fB-V\fR is the only command-line argument, \fBq\fR then exits.
\fBq\ \&-V\fR also works inside \fBq\fR.
.br
\fBq\fR has a floating point version number.
Only development versions of \fBq\fR are non-integral.
.TP
.BI \-b
makes \fBq\fR run in Binary mode.
This cannot be changed for the session.
Files are read with no tab expansion or other character conversion.
The division into "lines" is somewhat arbitrary,
but a new line is always started following \fB^J\fR.
By default, binary edits are done in Fixed Length mode:
see \fBMODES\fR\ below.
.TP
.BI \-d
Do not perform DOS end-of-line translations (\fBCrLf=>Nl)\fR when reading files.
\fB-d\fR is a toggle and may be specified multiple times.
.TP
.BI \-e
Do not defEr scanning a memory-mapped file for the addresses of all line breaks.
This option gives an immediate count of lines in the file (instead of bytes).
(Normally, \fBq\fR only looks ahead for as many lines as are required to satisfy
the current command).
\fB-e\fR is a toggle and may be specified multiple times.
.TP
.BI \-i " initial_macro"
see \fBInitial Macro\fR above.
.TP
.BI \-m
Read files with \fBread(2)\fR instead of Memory-mapping with \fBmmap(2)\fR.
In practice this allows \fBS-SAVE\fR to overwrite the original file,
through the command "\fBs\fR\ \&\fIfile\fR".
An example of this being necessary is when \fBq\fR is spawned by the shell
command \fBcrontab\ \&-e\fR,
since the inode of the crontab file must not change.
(Normally, \fBq\fR would rename the old file,
write a new one and delete the renamed file,
to guard against a catastrophe while writing).
\fB-m\fR is a toggle and may be specified multiple times.
.TP
.BI \-n
see \fBStartup file\fR above.
.TP
.BI \-o
work \fIO\fRffline: \fBq\fR automatically issues \fBS-SAVE\fR and
\fBQ-QUIT\fR commands when it would otherwise prompt for user input).
.br
Note that if \fB-o\fR appears on the command line, \fBq\fR will never act as if
running in a pipe. This covers the situation where a shell script in a pipeline
wants to invoke \fBq -o\fR.
.TP
.BI \-q
run \fIQ\fRuietly: stdout is discarded (by redirection to \fB/dev/null\fR).
.TP
.BI \-t
Toggles Tab expansion when reading files.
With the default macro set loaded, Tab expansion is Off.
\fB-t\fR may be specified multiple times.
.TP
.BI \-v
see \fBRunning q in a pipe\fR above.
.TP
.BI \-vv
Ignore FD-FDEVNULL commands whether in a pipe or not. Implies \fB-v\fR
if running in a pipe.
.SH CONTROL KEYS
(\fB^A\fR stands for \fBCtrl-A\fR, and so on)
.TP
.BI DEL
Delete character before cursor
.TP
.BI ENTER
Accept current (file or command) line
.TP
.BI ESC
Abandon edit of current line, and terminate editing command if line from file
.TP
.BI ^A
Append excess of previous line to current line, cursor to EOL
.TP
.BI ^B
Cursor back to start of word, previous word if at word start
.TP
.BI ^C
(Interrupt)
.TP
.BI ^D
Delete character under cursor
.TP
.BI ^E
Toggle Inserting
.TP
.BI ^F
Cursor forward to start of next word
.TP
.BI ^G char
Cursor forward to next instance of \fIchar\fR, EOL if none such
.TP
.BI ^H
Cursor back to start of line or indent point if indenting.
(Remember as "Home" key)
.TP
.BI ^I
Insert spaces up to next tab position, 1 space if past last pos'n (as set by
\fBT-TABSET\fR)
.TP
.BI ^J
Same as \fBENTER\fR
.TP
.BI ^K
Delete character under cursor and all characters following
.TP
.BI ^L
Delete character before cursor and
all characters back to start of line.
If indenting, only delete back to the indent point
or if at the indent point then delete the indent
.TP
.BI ^M
Same as \fBENTER\fR
.TP
.BI ^N char
Start executing the \fIchar\fR macro
.TP
.BI ^O
Cursor forward to character following next "\fB/* \fR" sequence,
EOL if none such.
(For modifying C comments)
.TP
.BI ^P char
\fIchar\fR is entered into the line as-is
.TP
.BI ^Q
Line from cursor onwards goes to lower-case
.TP
.BI ^R
"Recover" line to its maximum-ever length.
In a file, that is the maximum length of the current line;
but in a command that is the maximum length since \fBq\fR started
(including commands from macros)
.TP
.BI ^S
Line from cursor onwards goes to upper-case
.TP
.BI ^T
Split line: character under cursor becomes 1st character of new line
(after any indent)
.TP
.BI ^U
Delete all characters in line
.TP
.BI ^V
Re-draw line
.TP
.BI ^W char
\fBchar\fR is entered into the line with parity on (+ 0200)
.TP
.BI ^X
Cursor forward 1 character
.TP
.BI ^Y
Cursor back 1 character (but never into the indent zone)
.TP
.BI ^Z
Cursor to EOL
.TP
.BI ^^
Repeat last \fB^G\fR\fIchar\fR
.SH Q COMMANDS
In this section:
.RS 3
A \fIboolean_argument\fR is one of
\fByes\fR, \fBno\fR, \fBon\fR, \fBoff\fR, \fBtrue\fR,
\fBfalse\fR or unique abbreviations of these.
.br
A \fItoken\fR is, by default,
a sequence of alphanumeric or underscore characters.
Any other character is regarded as a \fItoken_delimiter\fR.
The \fBFT-FTOKENCHAR\fR command can remove characters from the
token delimiter table, e.g. if a programming language allows \fB'$'\fR
in variable names, the command \fBFT\ \&$\fR will accommodate this.
.RE
.TP 15
.BI A-APPEND
Enter edit mode, appending lines to the file
.TP
.BI B-BACKUP
Save the file, keeping a backup copy named \fIfile\fR.bu
.TP
.BI C-COPY
Copy lines in the file (to somewhere else in the file)
.TP
.BI D-DELETE
Delete lines in file
.TP
.BI E-ENTER
Insert contents of another file to the file,
to appear before the current line
.TP
.BI FB-FBRIEF
Macros will run in "brief" mode:
individual commands will not appear but
the displayed line number will update periodically,
if the macro runs for more than about 200mS
.TP
.BI FC-FCASEINDEPEND
String matches will be case independent.
\fBFC\fR may be given a \fIboolean_argument\fR. Otherwise it is a toggle
.TP
.BI FD-FDEVNULL
Suppresses output by redirecting standard output to /dev/null.
Accepts a \fIboolean_argument\fR. Default is \fBfalse\fR.
Only allowed inside \fBU-USE\fR files (q.v.)
.TP
.BI FF-FFNOWRAP
Suppress display of subsequent parts of long lines.
See \fBDESCRIPTION above\fR
.TP
.BI FI-FIMMEDIATE_MACRO
Define a macro for immediate execution
.TP
.BI FL-FLOCATE
Locate a string as a \fItoken\fR. See \fBL-LOCATE\fR below
.TP
.BI FM-FMODE
Sets, displays or resets \fBq\fR's mode switches. See \fBMODES\fR below
.TP
.BI FN-FNONE
Macros will run in "none" mode: nothing is output until the macro finishes
.TP
.BI FO-FORGET
Forget the last D-DELETE command. Implied by any subsequent change to the file
.TP
.BI FQ-FQUIT
With an argument: same as \fBQ-QUIT\fR.
.br
Otherwsie: stop editing the current file and exit
(ignore extra \fIfile\fR arguments).
Also exit \fBq\fR if in a macro.
.TP
.BI FR-FREPROMPT
From inside a macro only: prompt the user for what to do next
.TP
.BI FT-FTOKENCHAR
Remove a character from the token delimiter table,
as discussed at the start of this section
.TP
.BI FV-FVERBOSE
Macros will run in "verbose" mode:
display is as if characters had been typed at the keyboard
.TP
.BI FX-FXCHANGE
Exchange the functions of a pair of control keys.
Only affects keyboard input (not macros or \fBU-Use\fR files)
.TP
.BI FY-FYCHANGEALL
Like \fBY-YCHANGEALL\fR except the string to be replaced is searched for as a
\fItoken\fR
.TP
.BI G-GOTO
Change the file position to the specified line number
.TP
.BI H-HELP
Give help on the given subject (or on \fBq\fR if none).
Can be used to display other files in the help directory
(e.g. system macro files (*.qm) and macro catalogues (*.cat))
.TP
.BI I-INSERT
Enter edit mode, inserting lines at the given line number
.TP
.BI J-JOIN
Join together lines from the given line number,
and enter edit mode on the joined line
.TP
.BI L-LOCATE
Locate first occurrence of given string
.TP
.BI M-MODIFY
Enter edit mode starting at the given line number
.TP
.BI N-NEWMACRO
Define a (new) macro. See q_macros(5)
.TP
.BI O-ONOFFINDENT
Enter or leave indent mode dependent on the supplied \fIboolean_argument\fR.
Acts as a toggle if no argument
.TP
.BI P-PRINT
Print lines of the file starting from the current file position, which moves
forward by the number of lines printed
.TP
.BI Q-QUIT
Stop editing the current file (except \fBq -A\fR and \fBq -V\fR which act as
per \fBOPTIONS\fR above).
With no arguments, start editing the next \fIfile\fR, exit if none.
Accepts another file as an argument,
or \fB$\fR\fIn\fR, where \fIn\fR is an index into the \fIfile\fR arguments on
the shell command line.
.br
With no arguments and inside a macro,
return from that macro unless mode \fB+q\fR is asserted (\fBq\fR exits)
.TP
.BI R-REPOSITION
Move lines in the file to somewhere else in the file
.TP
.BI S-SAVE
Save the file.
During the save process,
a temporary backup (called \fIfile\fR.tm) is kept in case of a catastrophe
.TP
.BI T-TABSET
Set tab positions for use by \fB^I\fR
.TP
.BI U-USEFILE
Take commands from the given file
.TP
.BI V-VIEW
Print lines each side of the current line number,
up to 1 screenful or the number (each side) given by a second argument
.TP
.BI W-WRITEFILE
Write lines from the file to another file
.TP
.BI X-XISTICS
Enters a command sub-processor with editing control keys disabled.
The only still-useful commands are \fBT\fR (to set assumed tab width in files)
and \fBX\fR (to exit back to the normal \fBq\fR command line)
.TP
.BI Y-YCHANGEALL
Change every occurrence of one given string to another.
Extra arguments can limit the range where this happens
.TP
.BI Z-ZENDUSE
Return from a \fBU-USE\fR file. Implied by hitting EOF
.SH MODES
\fBq\fR runs with various "switches" or "modes". For example,
the \fBtr\fR mode governs whether or not to expand tabs to spaces on reading.
For a full list, start \fBq\fR and enter \fBH FM\fR.
.SH ENVIRONMENT VARIABLES
.br
\f2Q_ETC_DIR\f1
.RS 3
Directory containing the system \f3qrc\f1 file.
Default: as set at build time, otherwise \f3/usr/local/etc\f1.
.RE
.PP
\f2Q_HELP_CMD\f1 or \f2PAGER\f1
.RS 3
The pager used by \f3H\f1-\f3HELP\f1 to display help files.
Default: as set at build time, otherwise \f3less\f1.
.RE
.PP
\f2Q_HELP_DIR\f1
.RS 3
Directory containing help files and macros.
Default: as set at build time, otherwise \f3/usr/local/share/q\f1.
.RE
.PP
\f2Q_MACRO_DIR\f1
.RS 3
Separate directory for system macros.
Default: directory containing help files.
.RE
.PP
\f2SHELL\f1
.RS 3
Shell used to implement the \f3!\f1 (shell) command.
Default: as set at build time, otherwise \f3/bin/sh\f1.
.RE
.PP
.SH SEE ALSO
qm.1, q_macros(5), q_opcodes(5)
.br
Much of \fBq\fR's documentation is in the form of help files,
accessed from within \fBq\fR
by the \f3H\f1-\f3HELP\f1 command.
.br
There are sample startup files, README files &c. in the Documentation directory.
.SH REPORTING BUGS
If you find a bug, please raise an issue at
.nf
https://github.com/duncan-roe/q/issues.
.fi
.SH AUTHOR
Written by Duncan Roe
