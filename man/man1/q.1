.\"
.\" q manual page.
.\" Copyright (c) 2018 Duncan Roe
.\"
.\" Original author: Duncan Roe
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2, or (at your option)
.\" any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; see the file COPYING.  If not, write to
.\" the Free Software Foundation, 59 Temple Place - Suite 330,
.\" Boston, MA 02111-1307, USA.
.\"
.TH Q 1 "Dec 6 2018" "q-54" "Linux Programmer's Manual"

.SH NAME
q \- line-orientated mostly WYSIWYG editor with a powerful macro facility

.SH SYNOPSIS
\f3q\f1 [\f3-AVbdemnoqt\f1] [\f3-i\f2 initial_macro\f1] [\f3+\f2line# file\f1]
[\f2file\f1[\f3:\f2line#\f1] [...]]
.br
\f2command\f1 [...] \f3| q \f1[\f3-bdntv\f1]\f3 -i\f2 initial_macro \f3|\f2
command\f1 [...]

.SH DESCRIPTION
\f3q\f1 is a command-driven line-oriented editor in which almost all the control
characters perform some editing function.
More complex functions are provided by macros.
.br
\f3q\f1 is always either in \f2edit mode\f1 or \f2 command mode\f1. In edit
mode, \f3q\f1 is editing a line from the current file;
in command mode, \f3q\f1 is building up the next command to execute.
Full editing is available in both modes.
.br
\f3q\f1 commands all abbreviate to 1 character except those starting \f3f\f1
which abbreviate to 2.
Command arguments are delineated by space or comma, with a pair of commas
denoting an empty argument.
Those commands that take the rest of the line as input treat any spaces
following the first as part of the argument.
A single quote turns off comma and space recognition until a matching single
quote or end of line.
Inside quoted text, a pair of quotes is interpreted as a single literal quote.
.br
\f3q\f1 commands are case-insensitive, as are \f3q\f1 \f3help\f1 topics.
The documentation generally refers to commands in upper case,
in the form \f2command abbreviation\f3-\f2full command name\f1
as in \f3H\f1-\f3HELP\f1 below.
.br
When showing file contents, \fBq\fR always displays line numbers. After the last
line of a file, \fBq\fR displays \fBE - O - F\fR (\fIE\fRnd \fIO\fRf \fIF\fRile)
in lieu of a line number.
.PP
\f3Startup file\f1
.RS 3
On starting, unless the \fB-n\fR option was given,
\fBq\fR reads commands from a startup file before accepting user
input.
These commands typically load macros and may set some modes (see \f3H FM\f1).
.br
\f3q\f1 first looks in the current working directory for a file named
\f3.qrc\f1.
If not found, it tries to open \f3~/.qrc\f1.
If that also fails then it reads the file \f3qrc\f1 in 
\f3/usr/local/etc\f1 or whatever was configured at build time.
.RE
.PP
\f3Line number\f1
.RS 3
If there is a \f2line#\f1 associated with a \fIfile\fR argument,
\f3q\f1 positions to that line and does a \f3V-VIEW\f1 command
before accepting user input.
.RE
.PP
\f3Command massaging\f1
.RS 3
Provided it has no quoted parts, \f3q\f1 will split off the first argument to a
command from the command if it can
(i.e. without the user needing to type the intervening space or comma).
It can do this for any command if the argument starts with a non-alphabetic
character and for all instances of the \f3!\f1 (shell) command.
For example, the command "p23" (print 23 lines) will be interpreted
(and displayed) as "p 23".
.RE
.PP
\fBInitial Macro\fR
.RS 3
On starting, if the \fB-i\fR\ \&\fIinitial_macro\fR option was given,
\fBq\fR constructs and obeys an \fIimmediate\ \&macro\fR
from the argument of \fB-i\fR (see \fBq_macros(5)\fR).
This runs after the first \fBfile\fR has been loaded.
.RE
.PP
\f3Running q in a pipe\f1
.RS 3
When running in a pipe, \f3q\f1 accumulates data from stdin until end of file
before doing anything else.
On exit, \f3q\f1 writes the edited file to stdout.
The mandatory \f3-i\f1 \fIinitial_macro\fR should not try to save the file.
stdin and / or stdout may be redirected from / to a file rather than a pipe:
the rule is that stdin and stdout must either both be a tty or both not be.
.br
Running in a pipe automatically asserts the \fB-o\fR option (work \fIO\fRffline:
\fBq\fR automatically issues \fBS-SAVE\fR and \fBQ-QUIT\fR commands
when it would otherwise prompt for user input).
.br
Running in a pipe also asserts the \fB-q\fR option (run \fIQ\fRuietly: stdout is
discarded (by redirection to \fB/dev/null\fR)).
This discarded output can be made visible by giving the \fB-v\fR option
(run \fIV\fRerbosely: stdout is instead redirected to stderr).
.RE

.SH OPTIONS
To see a description of all options, start \f3q\f1 and enter \f3H\ \&IQ\f1.
Commonly used options include:
.TP
.BI \-A
causes \fBq\fR to output the currently supported ALU (and FPU) opcodes.
If \fB-A\fR is the only command-line argument, \fBq\fR then exits.
\fBq\ \&-A\fR also works inside \fBq\fR.
.TP
.BI \-V
causes \fBq\fR to output its version number.
If \fB-V\fR is the only command-line argument, \fBq\fR then exits.
\fBq\ \&-V\fR also works inside \fBq\fR.
.br
\fBq\fR has a floating point version number.
Only development versions of \fBq\fR are non-integral.
.TP
.BI \-b
makes \fBq\fR run in Binary mode.
This cannot be changed for the session.
Files are read with no tab expansion or other character conversion.
The division into "lines" is somewhat arbitrary,
but a new line is always started following \fB^J\fR.
By default, binary edits are done in Fixed Length mode: from inside \fBq\fR see
\fBH\ \&FM\fR for more information.
.TP
.BI \-i " initial_macro"
see \fBInitial Macro\fR above.
.TP
.BI \-n
see \fBStartup file\fR above.
.TP
.BI \-o
see \fBRunning q in a pipe\fR above.
.TP
.BI \-q
see \fBRunning q in a pipe\fR above.
.TP
.BI \-v
see \fBRunning q in a pipe\fR above.

.SH ENVIRONMENT VARIABLES
	
.br
\f2Q_ETC_DIR\f1
.RS 3
Directory containing the system \f3qrc\f1 file.
Default: as set at build time, otherwise \f3/usr/local/etc\f1.
.RE
.PP
\f2Q_HELP_CMD\f1 or \f2PAGER\f1
.RS 3
The pager used by \f3H\f1-\f3HELP\f1 to display help files.
Default: as set at build time, otherwise \f3less\f1.
.RE
.PP
\f2Q_HELP_DIR\f1
.RS 3
Directory containig help files and macros.
Default: as set at build time, otherwise \f3/usr/local/share/q\f1.
.RE
.PP
\f2Q_MACRO_DIR\f1
.RS 3
Separate directory for system macros.
Default: directory containig help files.
.RE
.PP
\f2SHELL\f1
.RS 3
Shell used to implement the \f3!\f1 (shell) command.
Default: as set at build time, otherwise \f3/bin/sh\f1.
.RE
.PP

.SH EXAMPLES
	
.br
.B Paginate through loaded macros from shell command prompt
.br
(i.e. command to run in a separate window from the one running \fBq\fR)
.RS 3
The \fBq\fR command \fBn\ \&\-\fR lists out all loaded macros.
The line below captures this output and pipes it into \fBless\fR.
The command should be issued with the same current working directory as \fBq\fR
so as to pick up the correct \fIStartup file\fR.
.RE
.nf
cat /dev/null | q -v -i n,-^J 2>&1 | q -i fl,:^J^NC^NU^[d,1,-,-2^Ja^J^[d,-1^Jy,^P^M,,^J | less
.fi
.RS 3
The pipelene contains two invocations of \fBq\fR:
.RS 3
1.\ \&Run with the \fB-v\fR option
so output from \fBq\fR commands goes to stderr;
issue the \fBn,-\fR command; redirect stderr back into the stdout pipe.
.br
2.\ \&Trim off unwanted leading lines:
everything before the first line that has a colon surrounded by spaces
(i.e. token delimiters); trim off the unwanted trailing line
(in fact an internally generated \fBfq\fR command);
remove Cr (\fB^M\fR) characters.
.RE
Any need for shell quoting is obviated
by using \fBq\fR's \fIcomma\fR delimiter in commands.
The sequence \fB^NC^NU\fR guards against there being no defined macros -
see q_macros(5).
The above line is expanded for clarity:
the canonical (minimum length) version is:
.RE
.nf
cat /dev/null|q -vin-^J 2>&1|q -ifl:^J^NC^NU^[d1,-,-2^Ja^J^[d-1^Jy,^P^M^J|less
.fi
.PP
.B Change what the space macro does
.RS 3
The foundation macro set defines the space macro (\fB^N\fIspace\fR)
to run \fBmake\fR.
This \fBq\fR invocation sequence redefines the space macro to run
\fBtail\fR to output only the last line (i.e. without line numbering):
.RE
.nf
q -i 'n 040,! tail -n1 ^*ND^*N^*<4002>^*J^J'
.fi
.RS 3
The immediate macro definition has to be quoted,
since it contains the shell metacharacters space and angle brackets.
The definition of the space macro contains escaped carats (\fB^*\fR)
because the defined immediate macro will issue the N-NEWMACRO command
to redefine the space macro:
.RE
.nf
n 040,! tail -n1 ^ND^N^<4002>^J
.fi
.RS 3
(The sequence \fB^N^<4002>\fR retrieves the name of the current edit file).
.RE

.SH SEE ALSO
q_macros(5), q_opcodes(5)
.br
Much of \fBq\fR's documentation is in the form of help files,
accessed from within \fBq\fR
by the \f3H\f1-\f3HELP\f1 command.
.br
There are sample startup files, README files &c. in the Documentation directory.
.SH REPORTING BUGS
If you find a bug, please raise an issue at
.nf
https://github.com/duncan-roe/q/issues.
.fi
.SH AUTHOR
Written by Duncan Roe
