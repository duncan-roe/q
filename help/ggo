#!/bin/bash -p
# Hide shell commands from expect \
#set -x;\
[ -n "$1" ] || { echo "first arg must be program name" >&2;exit 1; } ;\
[ -x "$1" ] || { echo "$1 is not a program" >&2;exit 1; } ;\
PROGNAME=$1;export PROGNAME;shift;\
exec expect -- "$0" "$@"

# Set up
# === ==

# Get the program args, if any
if {$argc >= 2 && [string equal -nocase -length 2 [lindex $argv 0] -a]} \
  {set args [lindex $argv 1];set nextarg 2} \
  {set args {};set nextarg 0}

# start gdb, and put in some nice settings
spawn gdb -n -q
expect {(gdb) }
exp_send "file $env(PROGNAME)\r"
expect {(gdb) }
exp_send "set print null-stop\r"
expect {(gdb) }
exp_send "set print sevenbit-strings\r"
expect {(gdb) }
exp_send "set print elements 0\r"
expect {(gdb) }
exp_send "set height 0\r"
expect {(gdb) }
exp_send "set print pretty\r"
expect {(gdb) }
exp_send "set unwindonsignal on\r"
expect {(gdb) }
exp_send "b main\r"
expect {(gdb) }
set timeout 50
exp_send "run $args\r"
expect {(gdb) }
set timeout 10
#exp_internal 1
for {set i $nextarg} {$i < $argc} {incr i} \
{
  exp_send [lindex $argv $i]\r
  if {$i<$argc-1} \
    {expect -re "\[(\]gdb\[)\] |\r\n>| \\(y or \\\[n\\\]\\) "}
}                                  ;# for {set i 0} {$i < $argc} {incr i}
interact -echo \\\\ \
{
  puts {}
  exit
}
