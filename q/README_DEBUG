When debugging Q, I find it easiest to have gdb running in 1 terminal session
with all of q's input and output going to and coming from another. Also I use
"ggo" from the "command_line_tools" repository adjacent to that for Q.

For the benefit of anyone who doesn't have command_line_tools installed, there
is a copy of ggo in the help files directory. You can symlink or copy this into
your PATH, or substitute e.g. /usr/local/share/q/ggo into the template below.

In the session that is to act as Q's display, do the following:

> 22:10:13$ ps
>   PID TTY          TIME CMD
>  2385 pts/0    00:00:00 bash
>  4606 pts/0    00:00:00 ps
> 13:05:42$ sleep 10000

Note the pts number returned by the ps command. Issue the sleep command to stop
the shell from grabbing input.

In the session where you want to run gdb, do the following (substituting the
relevant pts number)(only 1 line of typing):

> 13:14:56$ ggo q -a '</dev/pts/0 >/dev/pts/0 2>&1' c
> spawn gdb -n
> GNU gdb (GDB) 7.5
> Copyright (C) 2012 Free Software Foundation, Inc.
> License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
> This is free software: you are free to change and redistribute it.
> There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
> and "show warranty" for details.
> This GDB was configured as "i486-slackware-linux".
> For bug reporting instructions, please see:
> <http://www.gnu.org/software/gdb/bugs/>.
> (gdb) file q
> Reading symbols from /home/dunc/q/q/q...done.
> (gdb) set print null-stop
> (gdb) set print sevenbit-strings
> (gdb) set print elements 0
> (gdb) set height 0
> (gdb) set print pretty
> (gdb) set confirm off
> (gdb) set unwindonsignal on
> (gdb) b main
> Breakpoint 1 at 0x804b414: file q.c, line 120.
> (gdb) run </dev/pts/0 >/dev/pts/0 2>&1
> Starting program: /home/dunc/q/q/q </dev/pts/0 >/dev/pts/0 2>&1
> warning: Could not load shared library symbols for linux-gate.so.1.
> Do you need "set solib-search-path" or "set sysroot"?
>
> Breakpoint 1, main (xargc=1, xargv=0xbfffedf4) at q.c:120
> 120       int newl = 0;             /* Label to go if Nl (MOD, INS, AP) */
> (gdb) c
> Continuing.

Insert any breakpoints you want set initially before the trailing "c" in the ggo
command. The trailing "c" is itself a gdb command to continue after hitting the
breakpoint which ggo always sets at "main".

To interrupt Q / gdb, enter ^C *in the gdb session*. Do NOT enter ^C in the Q
display session: it will have no effect on Q but it WILL terminate sleep.

When you have finished debugging, enter ^C in the Q display window to obtain the
shell prompt again:

> 13:05:42$ sleep 1000000
>
> Type H for help
> Noted screen dimensions 177 x 71
> > u .qrc
> > fd y /* ************************ C ************************
> > q
> ^C
> 13:43:30$
Handy template (export my_pty first):

ggo q -a "</dev/pts/$my_pty >/dev/pts/$my_pty 2>&1" "set max-value-size sizeof (struct scrbuf5)" c
