When debugging Q, I find it easiest to have gdb running in one terminal session
with all of Q's input and output going to and coming from another.

It can be useful to have the debugged Q run a keylog file, perhaps to yet
another terminal session, but key logging really comes into its own when
debugging Q macros as described in README_DEBUG_MACROS.

I run gdb under the control of "ggdb" from the "command_line_tools" repository
adjacent to that for Q. ggdb can do any or all of the following:
 - take care of the controlling tty of the debugged process (see below)
 - run any number of initialisation scripts (of gdb commands)
 - run arbitrary gdb commands from the end of ggdb's command line.
   This allows e.g. to exit gdb, recall the invoking ggdb command, insert a
   new "break" / "b" command in the command line
   (with a condition and / or commands if wanted)

For the benefit of anyone who doesn't have command_line_tools installed, there
is a copy of ggdb in Q's documentation directory. You can symlink or copy this
into your PATH, or substitute e.g. ./ggdb into the template below.

ggdb relies on expect. Some distributions come without expect by default. If
yours is one of these then you will need to install expect from the
distribution's repository if you haven't already.

As with gdb, it can be a plan to run ggdb in a "script" session for subsequent
analysis (especially to capture the ad-hoc breakpoints). "script -f" is good.

In the window that is to act as Q's display (the "target" window), do:

> $ tty
> /dev/pts/6
> $ sleep 1000000  # (except Cygwin). For Linux, 'exec disowntty' is better
Under Cygwin, sleep is not necessary.
Under Linux, using sleep has limitations documented below.
Under anything else (e.g. OpenBSD) use sleep.

That 3rd line is to stop shell from grabbing input (Cygwin does it by itself).
'sleep' always works, but under Linux you will get the gdb warning:

> warning: GDB: Failed to set controlling terminal: Operation not permitted

in the target window. disowntty is in command_line_tools or get it from
https://sourceware.org/bugzilla/show_bug.cgi?id=11403

In the window where you will run gdb (the "gdb" window), 2 things to do:

1. Enter e.g. "export my_tty=/dev/pts/6" (following on from the example above)

2. Select & paste the ggdb template below.
   2a. If you want to pass arguments to q, insert "-a <q_args>" after "ggdb".
       Quote or escape spaces between multiple args, e.g.
         ggdb -a "-b q" -t $my_tty q ...
   2b. If you want to set breakpoints or issue other gdb commands before
       running Q, put them before the trailing "c" in the ggdb line.
       The trailing "c" is itself a gdb command to continue after hitting the
       breakpoint which ggdb always sets at "main".
       You need to use shell escapes when setting breakpoints -
       see README_DEBUG_MACROS for some examples.
   Now touch Enter

Expect to see something like the following:

> spawn gdb -n -q
> (gdb) file q
> Reading symbols from q...done.
> (gdb) set print null-stop
> (gdb) set print sevenbit-strings
> (gdb) set print elements 0
> (gdb) set height 0
> (gdb) set print pretty
> (gdb) set unwindonsignal on
> (gdb) set inferior-tty /dev/pts/14
> (gdb) b main
> Breakpoint 1 at 0x40452d: file q.c, line 252.
> (gdb) run -b q
> Starting program: /home/dunc/q/q/q -b q
> [Thread debugging using libthread_db enabled]
> Using host libthread_db library "/lib64/libthread_db.so.1".
>
> Breakpoint 1, main (xargc=3, xargv=0x7fffffffd7a8) at q.c:252
> 252       bool recursing = !xargv;         /* In FR-FReprompt */
> (gdb) set max-value-size sizeof (struct scrbuf5)
> (gdb) c
> Continuing.

*If* you got the gdb warning, then to interrupt Q / gdb, enter ^C *in the gdb
window*. Do NOT enter ^C in the target window: it will have no effect on Q but
it WILL terminate sleep. Otherwise (no gdb warning, e.g. running under Cygwin),
enter ^C in the target window. (Under Linux with disowntty, ^C works in either
window, but YMMV).

When you have finished debugging, you *may* be able to regain use of the target
window:-
 - Linux / sleep: enter ^C in the target window to kill sleep
 - Cygwin: <enter> will get you a command prompt (or just enter a comand)
 - Linux / disowntty: you can't re-use the window, and the X button won't close
                      it. 'pkill -9 disowntty' to dispose of the window.

Handy templates (export log_tty if you have one) (export my_tty first):

ggdb -f maxsize.gdb -t $my_tty q c
ggdb -f maxsize.gdb -g darkbg.gdb -t $my_tty q c
ggdb -a "-k $log_tty -ifm+8^J" -f maxsize.gdb -t $my_tty q c
ggdb -a "-k $log_tty -vv" -f maxsize.gdb -t $my_tty q c
