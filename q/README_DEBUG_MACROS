INTRODUCTION
============

This README describes how to debug Q macros using gdb.
I originally planned to incorporate a macro debugger inside Q, but have shelved
that in favour of using gdb.

You don't need the Q source code to debug macros.

RUNNING THE MACRO DEBUGGER
======= === ===== ========

The Q macro debugger is based on running Q under the source level debugger gdb.

To debug Q, please follow the instructions in README_DEBUG down to but excluding
the line:
  'In the window where you will run gdb (the "gdb" window), 2 things to do:'

In the window where you will run gdb (the "gdb" window), 4 things to do:

1. If you don't have source, cd to Q's doc dir,
   i.e. the directory containing this README.
   If you do have source, cd to the q directory under the top-level, e.g.:
     cd /usr/src/q/q
   Either directory contains the .gdb files that you'll need to debug macros.

2. Enter e.g. "export my_tty=/dev/pts/6"
   (following on from the example in README_DEBUG)

3. Enter e.g. "export log_tty=/dev/pts/7"
   (following on from the example in README_DEBUG)

4. (Later) Select & paste your choice from the "TEMPLATES" section below.
   This step is covered in the tutorial, no need to do it right now.

PREPARATION
===========

As well as the gdb and target windows mentioned above (or in README_DEBUG),
you will want a Macro Browsing Window where you can browse the currently loaded
macro table.
Recommended is "qm -a" piped into "less". qm's "-a" (alternate format) option
displays all macro names in octal, the way gdb shows them.

For best results, the target window should be 88 characters wide.

Pick any of your other terminal sessions to be the log session. Enter "tty" in
that window to get its ID. Use this ID in the "export log_tty" command in the
gdb window.

In general you won't need another terminal session in which to examine source.
In fact, these instructions work when source is not available.
But if you plan to do advanced stuff, like set a watchpoint on the ALU R
register, then you will want source.

You might want an extra terminal window where you can view macro definition
files, e.g. for the comments therein. The distributed macro files are in the
same directory as the help files, so you can use H-Help to view them, e.g.
 "h word.qm" to see the definition of ^N^A.

TUTORIAL
========

This tutorial debugs the ^N^A macro in the word.qm system macro set.
The macro aligns text to fit inside tab 2.
It starts one of the most complex macro programs in the Q distribution.

This tutorial uses files in Q's documentation directory (a.k.a. Q's doc dir).
The location of this directory depends on how Q was installed:
the "make install" default is /usr/local/share/doc/q.
You should run your gdb session cd'd to this directory. From now on, files
without pathnames are in that directory.

Your macro browsing window can be cd'd anywhere, but it's simplest to have it
also cd'd to Q's doc dir. Assuming that, enter:
  qm -a help_dot_qrc | less
to browse the macros that the tutorial will load.
If cd'd elsewhere, prepend the path of help_dot_qrc
(default /usr/local/share/doc/q/).

The ^N^A macro is defined on the line starting "N A ..." in word.qm,
and shows up as line 1 in the macro table (macro 001).

ggdb comes with command_line_tools but if you don't have that then there is a
copy in Q's doc dir. The tutorial template uses this copy.

The file macro_debug_sample exercises the ^N^A macro suite.
If you have write access to macro_debug_sample, you might like to make a copy
and work on that.

RUN A SESSION
=== = =======

Using the templates below, export variables and issue the ggdb command.
Q will start in your target window. Optionally, set up your macro table window
as per TUTORIAL above.

In the target window, enter "v" to view the file you are working on. If it's
empty (so you didn't specify a file to edit) you can edit the file now by
entering "q macro_debug_sample".

TEMPLATES
=========

These templates assume ggdb is available from the PATH.
There is a copy in Q's doc dir which you can symlink, e.g.:
  mkdir -p ~/bin; ln -s /usr/local/share/doc/q/ggdb ~/bin
(using default file system locations from "make install").

Don't paste blank lines or comments: only paste the lines you want

--- Target Window

# All architectures
tty
# OpenBSD or Linux w/out disowntty
sleep 1000000
# Linux
exec disowntty

--- Macro Browsing Window

# You always want this
qm -a \
# if debugging in the doc dir
help_dot_qrc |
# if debugging in the source dir
../help/.qrc |
# You always want to end with this
less

--- gdb Window

export my_tty=   # Complete this from tty output
export log_tty=  # Complete this from tty output (optional)

# START GDB COMMAND
# You always want this
# Key in "./" before pasting this line if you want to use the ggdb in the CWD
ggdb -t $my_tty -f macros.gdb \
# If the dark blue addresses are hard to read
-g darkbg.gdb \

# START ARGS TO Q
# You always want this
-a "\
# If you defined log_tty (a keylogging window)
-k $log_tty \
# For the tutorial, you always want this (don't load default .qrc)
# You may not want it if debugging your own macros
-n \
# For the tutorial, you always want this (start .qrc replacement)
-iu,\
# If running tutorial in doc dir
help_dot_qrc^J\
# If running tutorial in source dir
../help/.qrc^J\
# For the tutorial, you always want this (misc Q cmds)
fv^Jfm+v^Jfm+8^J \
# Name of file to edit (optional but recommended if running tutorial)
macro_debug_sample\

# END ARGS TO Q
# You always want this
" \

# PROGRAM TO DEBUG (Q)
# If running tutorial in source dir
q \
# If running tutorial in doc dir
$(type -p q) \

# EXTRA GDB COMMANDS
# macros.gdb shows ^N^@ (restart current macro) as a call to macro 0.
# To see it as a call to the actual macro, append " ? thisch : curmac"
# to the "starting macro %o\n" command in macros.gdb. Or paste these 2 lines
commands\ 5 silent \
'printf "starting macro %o\n", thisch ? thisch : curmac' end \
# Insert your own commands here if you have some
# If you want Q to stop at main(), touch Enter. Otherwise this
c

START DEBUGGING
===== =========

In the target window, type Control-N followed by Control-A (^N^A).
Observe in the gdb window there is the new message "starting macro 1".
This is what you would hope to see after typing ^N^A.

In the gdb window, since the previous gdb command was "c" (short for "continue")
you can now touch <Enter> to continue on to the next macro.
Observe the next message "starting macro 1001". This corresponds to the
^N^<1001> in
001 ^NC^NS^N\^ND^N^<1001>
in line 1 of the macro table.

For those unfamiliar with Q macro coding: ^N^<1001> is a jump to macro 1001.
The ^ND immediately before it pushes a link to Q's macro stack so that the 1001
macro (hereinafter referred to as N1001) can return to the next character in
the ^A macro. It does this using the sequence ^NU.
D and U are what is called "pseudomacros": they are invoked with ^N as if they
were macros but perform some function implemented in Q's code instead.
The pseudomacro name "D" stands for "Down" and "U" stands for "Up" (c/w Call /
Return).
For more information about pseudomacros, enter the Q command "h pm", but NOT NOW
- you're in the middle of debugging a macro ;)

In the gdb window, touch <Enter> to continue on to the next macro. You see
macro 01 (^A) being resumed.
This tells you that N1001 or some macro it jumped to has issued ^NU.

Before moving on, take a look at the definition of N1001 in the macro table
(key /^1001 into the browsing window, assuming you are using less).
Observe that N1001 called N4000 but gdb didn't tell us that. Macros in the low
04000's are what is called "active pseudomacros" or "active pseudos". Their
actions are also documented in "h pm" (NOT NOW...:).
Unlike regular pseudomacros, active pseudos execute the action of ^NU on
completion so can be called using ^ND.
The ggdb command template above assumes you don't want to see calls to
pseudomacros (you wouldn't see returns from them anyway) by the gdb command
  cond 2 (thisch < 0101 || thisch > 0132) && thisch < 04000
The ALU opcodes occupy the higher part of the 04000 range and it's possible you
might want to debug them, but that's outside the scope of this README.

MAIN DEBUG LOOP
==== ===== ====

Again touch <Enter> in the gdb window. You see N701 starting:
  701 ^J^NC^NU^NA^N^<706>^NG>^N^<700>^N^<702> ;Leave lines starting "> " alone
N701 has an inline comment (it's part of the macro but never gets executed due
to the unconditional jump to N702 before it).

You can see N701 can jump to any of N706, N700 or N702. Telling us which this
and other macros jump to is the main objective of the debug session.

<Enter> shows that N701 jumps to N702 in this instance. Line 1 of the sample
file was not empty and did not start with "> " (assumed quoted email line).
[N701 only checks line starts '>'; N700 checks next char is ' '].

In fact line 1 is a single word of length > desired maximum line length. This
line is left unaltered, as we will see next.

N702 sets the cursor position according to whether line length is more than
desired maximum (as determined by putting cursor at last character in line and
seeing whether it is past tab 2).
  702 ^Z^Y^NP2^H^F^F^N^<704> ;New line:- first see if not too long
  ^NP2 obeys next 2 chars iff cursor is past tab 2 as it will be.
On a short line, it leaves the cursor at line end (after the last character).
On a long line, it leaves the cursor on the first character of the 3rd word in
the line. If there are < 3 words in the line, the cursor will also be at line
end (^F[word forward] has no effect at line end (unlike ^X[character forward]
which adds a space)).

N702 now jumps to N704, which is a looping macro
  704 ^NA^NS^Y^@^NP2^N^<705>^NA^N^<707>^F^F^N^@ ;Work along line
  The jump to macro zero (^@) at macro end is a jump to the current macro.
    It could be coded as ^N^<704> but that would have to be changed if the macro
    were to be renumbered whereas ^N^@ would keep working as before.
N704 leaves the cursor at line end if that's where it is, otherwise moves it
back one character (because it will be on the first character of a word and the
program wants it on the preceding space). This accomplished by
  ^NA^NS^Y^@
    ^NA : Obey next 2 chars iff (cursor) at line end
         (i.e. obey next 2 chars if at line end else skip them)
    ^NS : Skip next 2 chars
    ^Y  : Move cursor back 1
    ^@  : NUL, ignored by Q unless preceded by ^N (next char is macro id),
          ^P (next char is literal) or ^W (next char is literal parity-high).
      ^@ is required as padding, to make up the 2 chars that ^NS skips.
If the cursor is after tab 2 (whether still at end of line or not),
jump to N705. ^NP2^N^<705> does this:
  ^NP2     : Obey next 2 chars iff past tab 2. There are 80 available tabs,
             each identified by a single ASCII char ('2' in this case).
             For a list of all 80, type 'H AS" (in a separate Q window or after
             debugging finishes).
  ^N^<705> : Jump to macro 705
If still at end of line (because we left the cursor there earlier), we now know
it is not past tab 2 so this line is within the length limit:
jump to macro 707. ^NA^N^<707> does this.
We didn't jump, so move forward one word and do it all again: ^F^F^N^@
  ^F   : Word forward to the word we were at the start of before we did the ^Y.
         Probably ^X (character forward) would work instead, but I coded ^F.
  ^F   : Word forward to the next word (or to end of line).
  ^N^@ : Jump to the start of the current macro.

<Enter> indeed shows a jump to N705
  705 ^B^NP1^NS^N^<701>^?^T^N^<702>
  N001 set tab 1 to 1 so ^NP1 is true unless cursor is at line start
N705 is entered when the cursor was past tab 2. It either splits the line at the
preceding word boundary or, if there is only a single word in the line, lets the
line stay as-is.
After ^B[word back] cursor is at line start: ^NP1[cursor past tab 1] is false
so don't obey ^NS[skip 2] and jump to N701.

<Enter> confirms jump to N701
  701 ^J^NC^NU^NA^N^<706>^NG>^N^<700>^N^<702> ;Leave lines starting "> " alone

<Enter> again to execute N701. Observe line 1 appears in the Q window, owing to
the ^J at the start of N701.

ENDING THE SESSION EARLY
====== === ======= =====

Of course, you can simple enter "q" in the gdb window.

Instead, if you want to leave the session running but skip the rest of the
currently debugged macro, enter "disa" to disable breakpoints. Then "c" will
get you the Q prompt.

When you have finished debugging, you *may* be able to regain use of the target
window:-
 - Linux / sleep: enter ^C in the target window to kill sleep
 - Cygwin: <enter> will get you a command prompt (or just enter a comand)
 - Linux / disowntty: you can't re-use the window, and the X button won't close
                      it. 'pkill -9 disowntty' to dispose of the window.
